{
  "version": 3,
  "sources": ["../src/copy-local-ip-address.tsx", "../src/utils/common-utils.ts", "../src/utils/constants.ts"],
  "sourcesContent": ["import { getIPV4Address } from \"./utils/common-utils\";\nimport { Clipboard, closeMainWindow, environment, LaunchType, showHUD, updateCommandMetadata } from \"@raycast/api\";\n\nexport default async () => {\n  await closeMainWindow();\n  const ipv4 = getIPV4Address();\n  if (environment.launchType === LaunchType.UserInitiated) {\n    if (typeof ipv4 === \"string\") {\n      await Clipboard.copy(`${ipv4}`);\n      await showHUD(\"IP address \" + ipv4 + \" copied to clipboard\");\n    } else {\n      await showHUD(\"Failed to get IP address\");\n    }\n  }\n\n  await updateCommandMetadata({ subtitle: `Local IP ${ipv4}` });\n};\n", "import * as os from \"os\";\nimport { showToast, Toast } from \"@raycast/api\";\nimport axios from \"axios\";\nimport { IP_GEOLOCATION_API } from \"./constants\";\nimport { IPGeolocation } from \"../types/ip-geolocation\";\nimport Style = Toast.Style;\n\nexport const isEmpty = (string: string | null | undefined) => {\n  return !(string != null && String(string).length > 0);\n};\n\nexport function getIPV4Address() {\n  const interfaces = os.networkInterfaces();\n  for (const devName in interfaces) {\n    const iface = interfaces[devName];\n    if (typeof iface !== \"undefined\") {\n      for (let i = 0; i < iface.length; i++) {\n        const alias = iface[i];\n        //console.log(alias)\n        if (alias.family === \"IPv4\" && alias.address !== \"127.0.0.1\" && !alias.internal) {\n          return alias.address;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport function getIPV6Address() {\n  const interfaces = os.networkInterfaces();\n  for (const devName in interfaces) {\n    //\n    const iface = interfaces[devName];\n    if (typeof iface !== \"undefined\") {\n      for (let i = 0; i < iface.length; i++) {\n        const alias = iface[i];\n        //console.log(alias)\n        if (alias.family === \"IPv6\" && alias.address !== \"::1\" && !alias.internal) {\n          return alias.address;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport function getIPGeolocation(ipv4 = \"\", language = \"en\") {\n  return axios({\n    method: \"GET\",\n    url: IP_GEOLOCATION_API + ipv4,\n    params: {\n      lang: language,\n      fields: \"585727\",\n    },\n  })\n    .then((response) => {\n      return response.data as IPGeolocation;\n    })\n    .catch((reason) => {\n      showToast(Style.Failure, String(reason)).then();\n      return { status: \"fail\" } as IPGeolocation;\n    });\n}\n", "import { Icon } from \"@raycast/api\";\n\nexport const IP_GEOLOCATION_API = \"http://ip-api.com/json/\";\nexport const WORLD_TIME_API = \"http://worldtimeapi.org/api/timezone/\";\n\nexport const listIcons = [\n  Icon.Globe,\n  Icon.ChessPiece,\n  Icon.EditShape,\n  Icon.CircleProgress50,\n  Icon.Buoy,\n  Icon.HardDrive,\n  Icon.Patch,\n];\nexport const myIpListIcons = [\n  Icon.Info,\n  Icon.Cd,\n  Icon.Globe,\n  Icon.BullsEye,\n  Icon.ChessPiece,\n  Icon.EditShape,\n  Icon.CircleProgress50,\n  Icon.Buoy,\n  Icon.HardDrive,\n  Icon.Patch,\n];\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAoB,iBACpBC,EAAiC,wBCDjC,IAAAC,EAAqB,wBAKd,IAAMC,EAAY,CACvB,OAAK,MACL,OAAK,WACL,OAAK,UACL,OAAK,iBACL,OAAK,KACL,OAAK,UACL,OAAK,KACP,EACaC,EAAgB,CAC3B,OAAK,KACL,OAAK,GACL,OAAK,MACL,OAAK,SACL,OAAK,WACL,OAAK,UACL,OAAK,iBACL,OAAK,KACL,OAAK,UACL,OAAK,KACP,EDdO,SAASC,GAAiB,CAC/B,IAAMC,EAAgB,oBAAkB,EACxC,QAAWC,KAAWD,EAAY,CAChC,IAAME,EAAQF,EAAWC,CAAO,EAChC,GAAI,OAAOC,EAAU,IACnB,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACrC,IAAMC,EAAQF,EAAMC,CAAC,EAErB,GAAIC,EAAM,SAAW,QAAUA,EAAM,UAAY,aAAe,CAACA,EAAM,SACrE,OAAOA,EAAM,SAKrB,OAAO,IACT,CDzBA,IAAAC,EAAoG,wBAE7FC,EAAQ,SAAY,CACzB,QAAM,mBAAgB,EACtB,IAAMC,EAAOC,EAAe,EACxB,cAAY,aAAe,aAAW,gBACpC,OAAOD,GAAS,UAClB,MAAM,YAAU,KAAK,GAAGA,GAAM,EAC9B,QAAM,WAAQ,cAAgBA,EAAO,sBAAsB,GAE3D,QAAM,WAAQ,0BAA0B,GAI5C,QAAM,yBAAsB,CAAE,SAAU,YAAYA,GAAO,CAAC,CAC9D",
  "names": ["copy_local_ip_address_exports", "__export", "copy_local_ip_address_default", "__toCommonJS", "os", "import_api", "import_api", "listIcons", "myIpListIcons", "getIPV4Address", "interfaces", "devName", "iface", "i", "alias", "import_api", "copy_local_ip_address_default", "ipv4", "getIPV4Address"]
}
