"use strict";var k=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var P=(s,o)=>{for(var u in o)k(s,u,{get:o[u],enumerable:!0})},K=(s,o,u,h)=>{if(o&&typeof o=="object"||typeof o=="function")for(let c of x(o))!v.call(s,c)&&c!==u&&k(s,c,{get:()=>o[c],enumerable:!(h=D(o,c))||h.enumerable});return s};var M=s=>K(k({},"__esModule",{value:!0}),s);var V={};P(V,{default:()=>F});module.exports=M(V);var e=require("@raycast/api"),l=require("react"),n=require("react/jsx-runtime");function q(s){let{sequence:o,setSequences:u}=s,[h,c]=(0,l.useState)(),[g,I]=(0,l.useState)(o?o.shortcuts.length:1),[b,p]=(0,l.useState)(),[m,w]=(0,l.useState)(o?o.shortcuts.map(t=>t.keystrokes):[]),[f,y]=(0,l.useState)(o?o.shortcuts.map(t=>t.modifiers):[[]]),{pop:N}=(0,e.useNavigation)(),C=t=>t?(c(void 0),!0):(c("Name cannot be empty"),!1),A=t=>{if(t?.length){if(!parseInt(t)||parseInt(t)<1)return p("Count must be a positive integer"),!1}else return p("Must configure at least 1 shortcut"),!1;p(void 0);let i=parseInt(t);I(i);let r=[...m.slice(0,i)],a=[...f.slice(0,i)];for(;r.length<i;)r.push(""),a.push([]);return w(r),y(a),!0},d=[];for(let t=0;t<g;t++)d.push((0,n.jsx)(e.Form.Separator,{},`separator${t}`)),d.push((0,n.jsx)(e.Form.Description,{title:`Shortcut #${t+1}:`,text:t==0?"The first keyboard shortcut to execute":""},`description${t}`)),d.push((0,n.jsx)(e.Form.TextField,{id:`shortcutKeys${t}`,title:"Keystrokes",placeholder:"Keys to stroke",defaultValue:m[t],info:"The non-modifier keys to stroke as one contiguous string. For example, for the keyboard shortcut Command+A, the keystroke would be A. For Shift+Command+D, the keyboard would be D. This can also be an ASCII key code, e.g. 'ASCII character 31' (no quotes in input). You could also use key codes, e.g. 'key code 123' for left d-pad keystroke.",onChange:i=>{let r=[...m];r[t]=i||"",w(r)}},`keystrokes${t}`)),d.push((0,n.jsxs)(e.Form.TagPicker,{id:`shortcutModifiers${t}`,title:"Modifiers",defaultValue:f[t],info:"The modifier keys to stroke",onChange:i=>{let r=[...f];r[t]=i,y(r)},children:[(0,n.jsx)(e.Form.TagPicker.Item,{value:"command down",title:"command down",icon:{source:e.Icon.Circle,tintColor:e.Color.Red}}),(0,n.jsx)(e.Form.TagPicker.Item,{value:"control down",title:"control down",icon:{source:e.Icon.Circle,tintColor:e.Color.Blue}}),(0,n.jsx)(e.Form.TagPicker.Item,{value:"option down",title:"option down",icon:{source:e.Icon.Circle,tintColor:e.Color.Green}}),(0,n.jsx)(e.Form.TagPicker.Item,{value:"shift down",title:"shift down",icon:{source:e.Icon.Circle,tintColor:e.Color.Yellow}})]},`modifiers${t}`));return(0,n.jsxs)(e.Form,{actions:(0,n.jsx)(e.ActionPanel,{children:(0,n.jsx)(e.Action.SubmitForm,{title:"Save Shortcut Sequence",icon:e.Icon.Link,onSubmit:async t=>{if(!C(t.sequenceNameField))return;let i=m.map((a,S)=>({keystrokes:a,modifiers:f[S]})),r={name:t.sequenceNameField,description:t.sequenceDescriptionField,icon:t.sequenceIconField,shortcuts:i};if(o&&await e.LocalStorage.removeItem(o.name),await e.LocalStorage.setItem(t.sequenceNameField,JSON.stringify(r)),u){let a=await e.LocalStorage.allItems();u(Object.values(a).map(S=>JSON.parse(S)))}(0,e.showToast)({title:"Added Shortcut Sequence"}),o?N():(0,e.launchCommand)({name:"run-shortcut-sequence",type:e.LaunchType.UserInitiated,arguments:{sequenceName:""}})}})}),children:[(0,n.jsx)(e.Form.TextField,{id:"sequenceNameField",title:"Sequence Name",placeholder:"Name of shortcut sequence",defaultValue:o?o.name:void 0,info:"The name that will appear in list of shortcut sequences. This name is also the default provided when using the 'Save As Quicklink' action.",onChange:t=>C(t),error:h}),(0,n.jsx)(e.Form.Dropdown,{id:"sequenceIconField",title:"Icon",defaultValue:o?o.icon:void 0,info:"The icon that will appear next to this sequence in the list of shortcut sequences.",children:Object.entries(e.Icon).map(t=>(0,n.jsx)(e.Form.Dropdown.Item,{title:t[0],value:t[1],icon:t[1]},t[0]))}),(0,n.jsx)(e.Form.TextArea,{id:"sequenceDescriptionField",title:"Description (Optional)",defaultValue:o?o.description:void 0,placeholder:"This shortcut sequence is for...",info:"A description of this shortcut sequence to help you and others know what it does."}),(0,n.jsx)(e.Form.TextField,{id:"sequenceShortcutCount",title:"Number of Shortcuts",defaultValue:g.toString(),info:"The number of shortcuts that this shortcut sequence will run sequentially.",error:b,onChange:t=>A(t)}),d]})}var T=require("react/jsx-runtime");function F(){return(0,T.jsx)(q,{})}
