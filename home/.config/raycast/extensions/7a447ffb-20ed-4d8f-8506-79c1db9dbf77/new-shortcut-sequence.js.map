{
  "version": 3,
  "sources": ["../src/new-shortcut-sequence.tsx", "../src/components/SequenceForm.tsx"],
  "sourcesContent": ["import SequenceForm from \"./components/SequenceForm\";\n\nexport default function Command() {\n  return <SequenceForm />;\n}\n", "import {\n  Action,\n  ActionPanel,\n  Color,\n  Form,\n  Icon,\n  launchCommand,\n  LaunchType,\n  LocalStorage,\n  showToast,\n  useNavigation,\n} from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { Sequence } from \"../types\";\n\nexport default function SequenceForm(props: {\n  sequence?: Sequence;\n  setSequences?: React.Dispatch<React.SetStateAction<Sequence[] | undefined>>;\n}) {\n  const { sequence, setSequences } = props;\n  const [nameError, setNameError] = useState<string>();\n  const [shortcutCount, setShortcutCount] = useState<number>(sequence ? sequence.shortcuts.length : 1);\n  const [countError, setCountError] = useState<string>();\n  const [shortcutKeys, setShortcutKeys] = useState<string[]>(\n    sequence ? sequence.shortcuts.map((shortcut) => shortcut.keystrokes) : []\n  );\n  const [shortcutModifiers, setShortcutModifiers] = useState<string[][]>(\n    sequence ? sequence.shortcuts.map((shortcut) => shortcut.modifiers) : [[]]\n  );\n\n  const { pop } = useNavigation();\n\n  const updateNameError = (name?: string): boolean => {\n    if (!name) {\n      setNameError(\"Name cannot be empty\");\n      return false;\n    }\n    setNameError(undefined);\n    return true;\n  };\n\n  const updateCount = (count?: string): boolean => {\n    if (!count?.length) {\n      setCountError(\"Must configure at least 1 shortcut\");\n      return false;\n    } else if (!parseInt(count) || parseInt(count) < 1) {\n      setCountError(\"Count must be a positive integer\");\n      return false;\n    }\n    setCountError(undefined);\n\n    const intValue = parseInt(count);\n    setShortcutCount(intValue);\n    const newShortcutKeys = [...shortcutKeys.slice(0, intValue)];\n    const newShortcutModifiers = [...shortcutModifiers.slice(0, intValue)];\n    while (newShortcutKeys.length < intValue) {\n      newShortcutKeys.push(\"\");\n      newShortcutModifiers.push([]);\n    }\n    setShortcutKeys(newShortcutKeys);\n    setShortcutModifiers(newShortcutModifiers);\n    return true;\n  };\n\n  const shortcutFormFields: React.ReactElement[] = [];\n  for (let index = 0; index < shortcutCount; index++) {\n    shortcutFormFields.push(<Form.Separator key={`separator${index}`} />);\n    shortcutFormFields.push(\n      <Form.Description\n        key={`description${index}`}\n        title={`Shortcut #${index + 1}:`}\n        text={index == 0 ? \"The first keyboard shortcut to execute\" : \"\"}\n      />\n    );\n\n    shortcutFormFields.push(\n      <Form.TextField\n        id={`shortcutKeys${index}`}\n        key={`keystrokes${index}`}\n        title=\"Keystrokes\"\n        placeholder=\"Keys to stroke\"\n        defaultValue={shortcutKeys[index]}\n        info=\"The non-modifier keys to stroke as one contiguous string. For example, for the keyboard shortcut Command+A, the keystroke would be A. For Shift+Command+D, the keyboard would be D. This can also be an ASCII key code, e.g. 'ASCII character 31' (no quotes in input). You could also use key codes, e.g. 'key code 123' for left d-pad keystroke.\"\n        onChange={(value) => {\n          const newShortcutKeys = [...shortcutKeys];\n          newShortcutKeys[index] = value || \"\";\n          setShortcutKeys(newShortcutKeys);\n        }}\n      />\n    );\n\n    shortcutFormFields.push(\n      <Form.TagPicker\n        id={`shortcutModifiers${index}`}\n        key={`modifiers${index}`}\n        title=\"Modifiers\"\n        defaultValue={shortcutModifiers[index]}\n        info=\"The modifier keys to stroke\"\n        onChange={(value) => {\n          const newShortcutModifiers = [...shortcutModifiers];\n          newShortcutModifiers[index] = value;\n          setShortcutModifiers(newShortcutModifiers);\n        }}\n      >\n        <Form.TagPicker.Item\n          value=\"command down\"\n          title=\"command down\"\n          icon={{ source: Icon.Circle, tintColor: Color.Red }}\n        />\n        <Form.TagPicker.Item\n          value=\"control down\"\n          title=\"control down\"\n          icon={{ source: Icon.Circle, tintColor: Color.Blue }}\n        />\n        <Form.TagPicker.Item\n          value=\"option down\"\n          title=\"option down\"\n          icon={{ source: Icon.Circle, tintColor: Color.Green }}\n        />\n        <Form.TagPicker.Item\n          value=\"shift down\"\n          title=\"shift down\"\n          icon={{ source: Icon.Circle, tintColor: Color.Yellow }}\n        />\n      </Form.TagPicker>\n    );\n  }\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            title=\"Save Shortcut Sequence\"\n            icon={Icon.Link}\n            onSubmit={async (values) => {\n              if (!updateNameError(values.sequenceNameField)) {\n                return;\n              }\n\n              const shortcuts = shortcutKeys.map((keys, index) => {\n                return {\n                  keystrokes: keys,\n                  modifiers: shortcutModifiers[index],\n                };\n              });\n\n              const newSequence = {\n                name: values.sequenceNameField,\n                description: values.sequenceDescriptionField,\n                icon: values.sequenceIconField,\n                shortcuts: shortcuts,\n              };\n\n              if (sequence) {\n                await LocalStorage.removeItem(sequence.name);\n              }\n\n              await LocalStorage.setItem(values.sequenceNameField, JSON.stringify(newSequence));\n              if (setSequences) {\n                const items = await LocalStorage.allItems();\n                setSequences(Object.values(items).map((value) => JSON.parse(value)));\n              }\n\n              showToast({ title: \"Added Shortcut Sequence\" });\n              if (!sequence) {\n                launchCommand({\n                  name: \"run-shortcut-sequence\",\n                  type: LaunchType.UserInitiated,\n                  arguments: { sequenceName: \"\" },\n                });\n              } else {\n                pop();\n              }\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        id=\"sequenceNameField\"\n        title=\"Sequence Name\"\n        placeholder=\"Name of shortcut sequence\"\n        defaultValue={sequence ? sequence.name : undefined}\n        info=\"The name that will appear in list of shortcut sequences. This name is also the default provided when using the 'Save As Quicklink' action.\"\n        onChange={(value) => updateNameError(value)}\n        error={nameError}\n      />\n\n      <Form.Dropdown\n        id=\"sequenceIconField\"\n        title=\"Icon\"\n        defaultValue={sequence ? sequence.icon : undefined}\n        info=\"The icon that will appear next to this sequence in the list of shortcut sequences.\"\n      >\n        {Object.entries(Icon).map((entry) => (\n          <Form.Dropdown.Item title={entry[0]} value={entry[1]} icon={entry[1]} key={entry[0]} />\n        ))}\n      </Form.Dropdown>\n\n      <Form.TextArea\n        id=\"sequenceDescriptionField\"\n        title=\"Description (Optional)\"\n        defaultValue={sequence ? sequence.description : undefined}\n        placeholder=\"This shortcut sequence is for...\"\n        info=\"A description of this shortcut sequence to help you and others know what it does.\"\n      />\n\n      <Form.TextField\n        id=\"sequenceShortcutCount\"\n        title=\"Number of Shortcuts\"\n        defaultValue={shortcutCount.toString()}\n        info=\"The number of shortcuts that this shortcut sequence will run sequentially.\"\n        error={countError}\n        onChange={(value) => updateCount(value)}\n      />\n\n      {shortcutFormFields}\n    </Form>\n  );\n}\n"],
  "mappings": "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",
  "names": ["new_shortcut_sequence_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_jsx_runtime", "SequenceForm", "props", "sequence", "setSequences", "nameError", "setNameError", "shortcutCount", "setShortcutCount", "countError", "setCountError", "shortcutKeys", "setShortcutKeys", "shortcut", "shortcutModifiers", "setShortcutModifiers", "pop", "updateNameError", "name", "updateCount", "count", "intValue", "newShortcutKeys", "newShortcutModifiers", "shortcutFormFields", "index", "value", "values", "shortcuts", "keys", "newSequence", "items", "entry", "import_jsx_runtime", "Command", "SequenceForm"]
}
